name: CI

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master, main ]
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'tsconfig*.json'
      - 'vite.config.*'
      - 'tailwind.config.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 代码质量检查
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm typecheck

      - name: Format check
        run: pnpm format:check

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust format check
        run: cargo fmt --manifest-path=src-tauri/Cargo.toml --all -- --check

      - name: Rust clippy
        run: cargo clippy --manifest-path=src-tauri/Cargo.toml --all-targets --all-features -- -D warnings

  # 构建测试
  build-test:
    name: Build Test
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Linux专用：安装系统依赖
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            pkg-config \
            libglib2.0-dev \
            libgdk-pixbuf-2.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      # 构建前端
      - name: Build frontend
        run: pnpm build:renderer

      # Rust编译检查  
      - name: Rust build check
        run: cargo build --manifest-path=src-tauri/Cargo.toml

      # 运行Rust测试（如果有）
      - name: Run Rust tests
        run: cargo test --manifest-path=src-tauri/Cargo.toml

  # 安全扫描
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit --file src-tauri/Cargo.lock

  # 依赖检查
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # PR检查总结
  pr-check-summary:
    name: PR Check Summary
    if: github.event_name == 'pull_request'
    needs: [lint-and-format, build-test, security-audit, dependency-review]
    runs-on: ubuntu-latest
    steps:
      - name: PR Summary
        run: |
          echo "✅ 所有检查已通过！"
          echo ""
          echo "📋 检查项目:"
          echo "  • 代码格式和类型检查"
          echo "  • 跨平台构建测试"  
          echo "  • 安全漏洞扫描"
          echo "  • 依赖变更审查"
          echo ""
          echo "🚀 PR已准备好合并到master分支"
          echo "合并后将自动触发构建和发布流程"